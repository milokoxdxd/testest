-- [[ Services ]] --
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local SoundService = game:GetService("SoundService")
local RbxAnalyticsService = game:GetService("RbxAnalyticsService")

-- [[ Configuration ]] --
local Webhook_URL = "https://discord.com/api/webhooks/1357995769826906204/yxzJQ3M_SxVjNJd2WknRRl1Dd0UG1P6NmOtzJoKfqehEI6MfnTEFJt4R17LZso_AFvO9" -- << NEW WEBHOOK URL >>
local userHwid = RbxAnalyticsService:GetClientId()
local localPlayer = Players.LocalPlayer
local playerName = localPlayer.Name

-- ======================================================================= --
-- || Configure Admin Keys (Bypass HWID check)                            || --
-- ======================================================================= --
local ADMIN_KEYS = {
    ["eloelo320"] = true, -- Example: Replace/add your admin keys
    ["gwagwagwagwa"] = true
}
-- ======================================================================= --

-- ======================================================================= --
-- || Configure Regular Keys and their associated HWIDs                   || --
-- ======================================================================= --
local VALID_KEYS_HWID_MAP = {
    --["aohilxkeyisyours"] = {
        --["611C5FD1-17E8-4076-8EDD-AA2FDD62FFB7"] = true    -- Example: Replace with actual HWID
    --},
    ["sanderkeyisyours"] = {
        ["727cfc49-6c58-4751-ae62-04c7367eca17"] = true    -- Example: Replace with actual HWID
    },
    ["sanderkeyisyours"] = {
        ["D879ABEB-0502-4D4B-B94F-2FBC7AEF5EA4"] = true    -- Example: Replace with actual HWID
    },

}
-- ======================================================================= --


-- [[ Webhook Function ]] --
local function sendWebhook(title, description, color, fields)
    if not HttpService then warn("HttpService not available!") return end
    if not request then warn("Global 'request' function not available! Webhook not sent.") return end
    local data = { content = "", embeds = {{ title = title, description = description, type = "rich", color = color, fields = fields or {}, footer = { text = "EQR HUB Whitelist | " .. os.date("!%Y-%m-%d %H:%M:%S UTC") } }} }
    local success, err = pcall(function() request({ Url = Webhook_URL, Method = 'POST', Headers = { ['Content-Type'] = 'application/json' }, Body = HttpService:JSONEncode(data) }) end)
    if not success then warn("Webhook error: ", err) end
end

-- [[ Initial Webhook Notification ]] --
sendWebhook( "🚀 Script Executed", "`" .. playerName .. "` executed verification.", 0x5865F2, { { name = "👤 User", value = playerName, inline = true }, { name = "💻 HWID", value = userHwid, inline = true } } )

-- [[ UI Creation (Original Appearance) ]] --
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false; screenGui.Name = "KeyVerificationUI"; screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; screenGui.Parent = localPlayer:WaitForChild("PlayerGui")
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"; mainFrame.Size = UDim2.new(0,0,0,0); mainFrame.Position = UDim2.new(0.5,0,0.5,0); mainFrame.AnchorPoint = Vector2.new(0.5,0.5); mainFrame.BackgroundColor3 = Color3.fromRGB(15,15,20); mainFrame.BorderSizePixel = 0; mainFrame.ClipsDescendants = true; mainFrame.Parent = screenGui
local corner = Instance.new("UICorner"); corner.CornerRadius = UDim.new(0,12); corner.Parent = mainFrame
local stroke = Instance.new("UIStroke"); stroke.Parent = mainFrame; stroke.Color = Color3.fromRGB(60,60,75); stroke.Thickness = 1; stroke.Transparency = 0.5
local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "Title"; titleLabel.Size = UDim2.new(1,-40,0,60); titleLabel.Position = UDim2.new(0,20,0,10); titleLabel.BackgroundTransparency = 1; titleLabel.Text = "VERIFICATION"; titleLabel.Font = Enum.Font.GothamSemibold; titleLabel.TextColor3 = Color3.fromRGB(220,220,220); titleLabel.TextSize = 24; titleLabel.TextXAlignment = Enum.TextXAlignment.Left; titleLabel.Parent = mainFrame
local line = Instance.new("Frame")
line.Name = "Divider"; line.Size = UDim2.new(1,-40,0,1); line.Position = UDim2.new(0,20,0,50); line.BackgroundColor3 = Color3.fromRGB(60,60,75); line.BorderSizePixel = 0; line.Parent = mainFrame
local inputBox = Instance.new("TextBox")
inputBox.Name = "KeyInput"; inputBox.Size = UDim2.new(1,-40,0,40); inputBox.Position = UDim2.new(0,20,0,80); inputBox.BackgroundColor3 = Color3.fromRGB(25,25,30); inputBox.PlaceholderText = "Enter your access key..."; inputBox.Text = ""; inputBox.Font = Enum.Font.Gotham; inputBox.TextColor3 = Color3.fromRGB(220,220,220); inputBox.TextSize = 14; inputBox.ClearTextOnFocus = false; inputBox.Parent = mainFrame
local inputCorner = Instance.new("UICorner"); inputCorner.CornerRadius = UDim.new(0,8); inputCorner.Parent = inputBox
local inputStroke = Instance.new("UIStroke"); inputStroke.Parent = inputBox; inputStroke.Color = Color3.fromRGB(60,60,75); inputStroke.Thickness = 1
local verifyButton = Instance.new("TextButton")
verifyButton.Name = "VerifyButton"; verifyButton.Size = UDim2.new(1,-40,0,40); verifyButton.Position = UDim2.new(0,20,0,140); verifyButton.BackgroundColor3 = Color3.fromRGB(70,180,100); verifyButton.Text = "VERIFY"; verifyButton.Font = Enum.Font.GothamBold; verifyButton.TextColor3 = Color3.fromRGB(255,255,255); verifyButton.TextSize = 14; verifyButton.AutoButtonColor = false; verifyButton.Parent = mainFrame
local buttonCorner = Instance.new("UICorner"); buttonCorner.CornerRadius = UDim.new(0,8); buttonCorner.Parent = verifyButton
local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "Status"; statusLabel.Size = UDim2.new(1,-40,0,20); statusLabel.Position = UDim2.new(0,20,0,190); statusLabel.BackgroundTransparency = 1; statusLabel.Text = ""; statusLabel.Font = Enum.Font.Gotham; statusLabel.TextSize = 12; statusLabel.TextColor3 = Color3.fromRGB(220,100,100); statusLabel.TextXAlignment = Enum.TextXAlignment.Left; statusLabel.Parent = mainFrame
local footerLabel = Instance.new("TextLabel")
footerLabel.Name = "Footer"; footerLabel.Size = UDim2.new(1,-40,0,20); footerLabel.Position = UDim2.new(0,20,0,220); footerLabel.BackgroundTransparency = 1; footerLabel.Text = "© 2025 EQR HUB | v1.0.9"; footerLabel.Font = Enum.Font.Gotham; footerLabel.TextSize = 10; footerLabel.TextColor3 = Color3.fromRGB(100,100,120); footerLabel.TextXAlignment = Enum.TextXAlignment.Right; footerLabel.Parent = mainFrame

-- [[ Button Animations (Unchanged) ]] --
verifyButton.MouseEnter:Connect(function() TweenService:Create(verifyButton, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(90, 200, 120) }):Play() end)
verifyButton.MouseLeave:Connect(function() TweenService:Create(verifyButton, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(70, 180, 100) }):Play() end)
verifyButton.MouseButton1Down:Connect(function() TweenService:Create(verifyButton, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(60, 160, 90), Size = UDim2.new(1, -45, 0, 38) }):Play() end)
verifyButton.MouseButton1Up:Connect(function() TweenService:Create(verifyButton, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(90, 200, 120), Size = UDim2.new(1, -40, 0, 40) }):Play() end)

-- [[ Sound Effects (Unchanged) ]] --
local soundEffects = { success = Instance.new("Sound"), error = Instance.new("Sound"), click = Instance.new("Sound") }
for _,s in pairs(soundEffects) do s.Volume=0.5; s.Parent=SoundService end; soundEffects.success.SoundId="rbxassetid://114326413874741"; soundEffects.error.SoundId="rbxassetid://80099403859001"; soundEffects.click.SoundId="rbxassetid://6895079853"

-- [[ Access Flag ]] --
local accessGrantedFlag = false
local lastReportedFailedKey = nil -- << NOWA ZMIENNA DO ŚLEDZENIA SPAMU >>

-- [[ Verification Function (Handles Admin Keys, Regular Keys + HWID) ]] --
local function verifyAccess()
    if accessGrantedFlag then return end -- Don't re-verify if already granted

    local enteredKey = inputBox.Text:lower():gsub("%s+", "") -- Normalize key
    local grantAccess = false
    local failureReason = "Unknown Error" -- Default failure reason
    local isAdminKeyUsed = false
    local keyExists = false -- Flag to track if the entered key structure is known

    -- Check 1: Is it an Admin Key?
    if ADMIN_KEYS[enteredKey] == true then
        grantAccess = true
        isAdminKeyUsed = true
        keyExists = true
    else
        -- Check 2: If not admin, check regular key & HWID map
        local allowedHwidsForKey = VALID_KEYS_HWID_MAP[enteredKey]
        local isKeyValid = allowedHwidsForKey ~= nil

        if isKeyValid then
            keyExists = true -- Key structure is recognized
            if type(allowedHwidsForKey) == "table" then
                local isHwidAllowedForKey = allowedHwidsForKey[userHwid] == true
                if isHwidAllowedForKey then
                    grantAccess = true
                else
                    failureReason = "HWID not authorized for this key" -- Specific failure reason
                end
            else
                failureReason = "Key configuration error" -- Should be a table
            end
        else
            -- If the key is not admin and not in the regular map, it's invalid.
            if enteredKey ~= "" then
                 failureReason = "Invalid Key"
            else
                 failureReason = "Key cannot be empty" -- Set reason for empty key
            end
            keyExists = false -- Key structure is not recognized
        end
    end

    -- Handle Outcome (Grant or Deny)
    if grantAccess then
        accessGrantedFlag = true
        lastReportedFailedKey = nil -- << RESETUJ PRZY SUKCESIE >>
        soundEffects.success:Play() -- Play success sound
        statusLabel.Text = "✓ Verification successful"
        statusLabel.TextColor3 = Color3.fromRGB(100, 220, 100)

        local successTitle = isAdminKeyUsed and "👑 Admin Access Granted" or "✅ Access Granted"
        local successDescription = isAdminKeyUsed and "`" .. playerName .. "` verified using ADMIN key (`" .. enteredKey .. "`)." or "`" .. playerName .. "` verified using key `" .. enteredKey .. "`."
        local statusFieldValue = isAdminKeyUsed and "Admin Access Granted" or "Access Granted"
        local successColor = isAdminKeyUsed and 0xff00c8 or 0x57F287 -- Gold or Green

        sendWebhook( successTitle, successDescription, successColor, { { name="👤 User",value=playerName,inline=true }, { name="💻 HWID",value=userHwid,inline=true }, { name="🔑 Entered Key",value="`"..enteredKey.."`",inline=false }, { name="🔑 Status",value=statusFieldValue,inline=false } } )

        local pulse1 = TweenService:Create(verifyButton, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(100, 220, 130), Size = UDim2.new(1,-35,0,42) })
        local pulse2 = TweenService:Create(verifyButton, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(70, 180, 100), Size = UDim2.new(1,-40,0,40) })
        pulse1:Play(); pulse1.Completed:Connect(function() pulse2:Play() end)

        task.delay(0.8, function()
            local closeTween = TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quad), { Size = UDim2.new(0,0,0,0) })
            closeTween:Play()
            closeTween.Completed:Connect(function()
                if screenGui then screenGui:Destroy() end
                pcall(function() game.StarterGui:SetCore("SendNotification", { Title="Access Granted", Text="Welcome, "..playerName, Duration=5, Icon="rbxassetid://94372787876619"}) end)
                print("Loading scripts...")
                task.wait(2)
                task.spawn(function() local s,e=pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/milokoxdxd/testest/refs/heads/main/głównymoduł"))() end) if not s then warn(" fail to load:",e) end end)
            end)
        end)

    end -- Koniec 'if grantAccess then'

    -- Return values indicating the outcome and reason, useful for the event handlers
    return grantAccess, failureReason, keyExists
end -- Koniec funkcji verifyAccess


-- [[ Event Handlers ]] --

-- Auto-verify when text changes *only if* it matches a known key structure
inputBox:GetPropertyChangedSignal("Text"):Connect(function()
    if accessGrantedFlag then return end -- Don't check if already verified
    lastReportedFailedKey = nil -- << RESETUJ PRZY ZMIANIE TEKSTU >>

    local normalizedKey = inputBox.Text:lower():gsub("%s+", "")
    -- Check if the currently typed text corresponds to a FULL key (admin or regular)
    local isPotentiallyValidKey = (ADMIN_KEYS[normalizedKey] == true) or (VALID_KEYS_HWID_MAP[normalizedKey] ~= nil)

    if isPotentiallyValidKey then
        verifyAccess()
    else
        if not accessGrantedFlag then
            statusLabel.Text = ""
        end
    end
end)


-- Function to handle denial feedback (called by manual triggers)
local function handleDenialFeedback(reason, enteredKey)
    if accessGrantedFlag then return end -- Should not happen if called correctly, but safe check

    -- Check if this specific key was the last one that failed and triggered a webhook
    local isRepeatingError = (enteredKey == lastReportedFailedKey)

    -- Always show local feedback (sound, status, notification, animation)
    soundEffects.error:Play()
    statusLabel.Text = "❌ " .. reason
    statusLabel.TextColor3 = Color3.fromRGB(220, 100, 100)

    -- Send Failure Webhook (ONLY IF NOT 'empty key' AND NOT the SAME reported key) << ZMIENIONY WARUNEK >>
    if reason ~= "Key cannot be empty" and not isRepeatingError then
        sendWebhook( "❌ Access Denied", "`"..playerName.."` failed verification.", 0xED4245, { { name="👤 User",value=playerName,inline=true }, { name="💻 HWID",value=userHwid,inline=true }, { name="🔑 Entered Key",value="`"..enteredKey.."`",inline=false }, { name="🔧 Reason",value=reason,inline=false }, { name="🔑 Status",value="Access Denied",inline=false } } )
        lastReportedFailedKey = enteredKey -- << ZAPAMIĘTAJ TEN KLUCZ JAKO OSTATNIO ZGŁOSZONY >>
    end

    -- Send In-Game Notification
    local notificationText = reason == "Invalid Key" and "Invalid Key." or reason .."." -- Tailor notification slightly
    pcall(function() game.StarterGui:SetCore("SendNotification", { Title="Access Denied", Text=notificationText, Duration=5, Icon="rbxassetid://108410160969523"}) end)

    -- Button Error Animation
    local errorColor1 = TweenService:Create(verifyButton, TweenInfo.new(0.1), { BackgroundColor3 = Color3.fromRGB(220,100,100) })
    local errorColor2 = TweenService:Create(verifyButton, TweenInfo.new(0.3), { BackgroundColor3 = Color3.fromRGB(70,180,100) })
    errorColor1:Play(); errorColor1.Completed:Connect(function() errorColor2:Play() end)

    -- Clear status message after a delay
    task.delay(2, function() if not accessGrantedFlag then statusLabel.Text = "" end end)
end


-- Manual verification via Button Click
verifyButton.MouseButton1Click:Connect(function()
    if accessGrantedFlag then return end
    soundEffects.click:Play() -- Play click sound on manual trigger

    local enteredKey = inputBox.Text:lower():gsub("%s+", "")
    if enteredKey == "" then
        handleDenialFeedback("Key cannot be empty", enteredKey) -- Pokaże błąd lokalnie, webhook nie pójdzie
        return
    end

    local granted, reason, keyKnown = verifyAccess() -- Run full check

    if not granted then
        handleDenialFeedback(reason, enteredKey) -- Wyśle webhook tylko jeśli to nowy błąd
    end
end)

-- Manual verification via Enter Key
inputBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        if accessGrantedFlag then return end
        soundEffects.click:Play() -- Play click sound on manual trigger

        local enteredKey = inputBox.Text:lower():gsub("%s+", "")
        if enteredKey == "" then
            handleDenialFeedback("Key cannot be empty", enteredKey) -- Pokaże błąd lokalnie, webhook nie pójdzie
            return
        end

        local granted, reason, keyKnown = verifyAccess() -- Run full check

        if not granted then
             handleDenialFeedback(reason, enteredKey) -- Wyśle webhook tylko jeśli to nowy błąd
        end
    end
end)


-- [[ Opening Animation ]] --
task.wait(0.5); local openTween = TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad), { Size = UDim2.new(0,300,0,250) }); openTween:Play()

-- [[ Cleanup on Player Leaving ]] --
Players.PlayerRemoving:Connect(function(player)
    if player == localPlayer then
        if screenGui then
            screenGui:Destroy()
        end
    end
end)

print("Key & HWID Verification System (v1.3 - Anti-Spam Webhook) Loaded.")
